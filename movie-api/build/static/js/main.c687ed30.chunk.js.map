{"version":3,"sources":["components/mainScreen.js","components/movieDetails.js","components/movieCard.js","components/RatingComponent.js","App.js","serviceWorker.js","index.js"],"names":["btnStyle","borderRadius","width","height","MainScreen","useState","page","setPage","movieData","setMovieData","fetchPage","pageNum","fetch","then","result","json","data","results","catch","err","console","log","useEffect","length","className","map","movie","MovieCard","key","id","type","style","onClick","MovieDetails","props","fetchMovie","Object","keys","match","params","title","release_date","original_language","overview","backdrop_path","vote_average","popularity","production_companies","slice","src","alt","i","name","RatingComponent","ratingStyle","borderBottomLeftRadius","textAlign","display","justifyContent","alignContent","flexDirection","position","right","backgroundColor","fontSize","fontWeight","linkStyle","textDecoration","color","linkStyleHover","hover","setHover","handleHover","to","onMouseEnter","onMouseLeave","poster_path","toUpperCase","rating","setRating","token","JSON","parse","localStorage","getItem","guest_session_id","cache","resp","movieList","filter","starRatedColor","changeRating","newRating","method","mode","credentials","headers","redirect","referrer","body","stringify","value","response","error","numberOfStars","res","text","App","fetchGuestToken","setItem","dateString","expires_at","Date","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c687ed30.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { MovieCard } from \"./\";\r\n\r\nconst btnStyle = {\r\n  borderRadius: \"100%\",\r\n  width: \"60px\",\r\n  height: \"60px\"\r\n};\r\n\r\nfunction MainScreen() {\r\n  const [page, setPage] = useState(1);\r\n  const [movieData, setMovieData] = useState([]);\r\n\r\n  const handlePage = () => {\r\n    fetchPage(page + 1);\r\n  };\r\n\r\n  const fetchPage = pageNum =>\r\n    fetch(\r\n      \"https://api.themoviedb.org/3/movie/top_rated?api_key=f57efe1486f26a1000ecc7f73ebf0005&language=en-US&page=\" +\r\n        pageNum\r\n    )\r\n      .then(result => {\r\n        return result.json();\r\n      })\r\n      .then(data => {\r\n        setMovieData(movieData => [...movieData, ...data.results]);\r\n        setPage(page => page + 1);\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n\r\n  useEffect(() => {\r\n    if (!movieData.length) fetchPage(page);\r\n  });\r\n  return movieData.length ? (\r\n    <div className=\"text-center\">\r\n      <div className=\"row\">\r\n        {movieData.map(movie => (\r\n          <MovieCard key={movie.id} movie={movie}></MovieCard>\r\n        ))}\r\n      </div>\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn btn-dark \"\r\n        style={btnStyle}\r\n        onClick={handlePage}\r\n      >\r\n        Load\r\n      </button>\r\n    </div>\r\n  ) : (\r\n    <div>Loading...</div>\r\n  );\r\n}\r\nexport { MainScreen };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { RatingComponent } from \"./\";\r\nfunction MovieDetails(props) {\r\n  const [movie, fetchMovie] = useState({});\r\n  useEffect(() => {\r\n    // if (!movieData.length) fetchPage(page);\r\n    if (Object.keys(movie).length === 0)\r\n      fetch(\r\n        \"https://api.themoviedb.org/3/movie/\" +\r\n          props.match.params.id +\r\n          \"?api_key=f57efe1486f26a1000ecc7f73ebf0005&language=en-US\"\r\n      )\r\n        .then(result => {\r\n          return result.json();\r\n        })\r\n        .then(data => {\r\n          fetchMovie(() => data);\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n        });\r\n  });\r\n  // language and production companies\r\n  let {\r\n    title,\r\n    release_date,\r\n    original_language,\r\n    overview,\r\n    backdrop_path,\r\n    vote_average,\r\n    popularity,\r\n    production_companies,\r\n    id\r\n  } = movie;\r\n  return Object.keys(movie).length === 0 ? (\r\n    <div>Loading...</div>\r\n  ) : (\r\n    <div className=\"\">\r\n      <h1>\r\n        {title} ({release_date.slice(0, 4)})\r\n      </h1>\r\n      {console.log(movie)}\r\n      <img\r\n        src={\"https://image.tmdb.org/t/p/w500\" + backdrop_path}\r\n        className=\"card-img-top\"\r\n        alt=\"...\"\r\n      />\r\n      <div>{overview}</div>\r\n\r\n      <p>\r\n        Rating: {vote_average} <br />\r\n        Popularity: {popularity} <br />\r\n        Language: {original_language} <br />\r\n        Production companies:{\" \"}\r\n        {production_companies.map(({ name }, i) =>\r\n          i === production_companies.length - 1 ? name : name + \", \"\r\n        )}\r\n      </p>\r\n      <RatingComponent vote_average={vote_average} id={id}></RatingComponent>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { MovieDetails };\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst ratingStyle = {\r\n  width: \"80px\",\r\n  height: \"80px\",\r\n  borderBottomLeftRadius: \"50px\",\r\n  textAlign: \"center\",\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n  alignContent: \"center\",\r\n  flexDirection: \"column\",\r\n  position: \"absolute\",\r\n  right: \"0\",\r\n  backgroundColor: \"rgba(255, 255, 255, 0.5)\",\r\n  fontSize: \"30px\",\r\n  fontWeight: \"bold\"\r\n};\r\n\r\nconst linkStyle = {\r\n  textDecoration: \"none\",\r\n  color: \"black\"\r\n};\r\nconst linkStyleHover = {\r\n  textDecoration: \"none\",\r\n  color: \"#606060\"\r\n};\r\nfunction MovieCard({ movie }) {\r\n  const [hover, setHover] = useState(false);\r\n  useEffect(() => {});\r\n  function handleHover() {\r\n    setHover(hover => !hover);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        \"col col-12  col-md-6 col-lg-4 col-xl-3 \" + (hover ? \"p-2\" : \"p-1\")\r\n      }\r\n    >\r\n      <Link\r\n        to={\"/movie/\" + movie.id}\r\n        style={hover ? linkStyleHover : linkStyle}\r\n      >\r\n        <div\r\n          className=\"card h-100 \"\r\n          onMouseEnter={handleHover}\r\n          onMouseLeave={handleHover}\r\n        >\r\n          <img\r\n            src={\"https://image.tmdb.org/t/p/w500\" + movie.poster_path}\r\n            className=\"card-img-top\"\r\n            alt=\"...\"\r\n          ></img>\r\n          <div className=\"\" style={ratingStyle}>\r\n            {movie.vote_average}\r\n          </div>\r\n          <div className=\"card-body\">\r\n            <h5 className=\"card-title\">\r\n              {movie.title} ({movie.release_date.slice(0, 4)})\r\n            </h5>\r\n            <p className=\"card-text\">\r\n              Language: {movie.original_language.toUpperCase()}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\nexport { MovieCard };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport StarRatings from \"react-star-ratings\";\r\n// const axios = require(\"axios\");\r\nfunction RatingComponent({ vote_average, id }) {\r\n  const [rating, setRating] = useState(0);\r\n  let token = JSON.parse(localStorage.getItem(\"guestToken\"));\r\n  console.log(\"TOKEN: \", token);\r\n\r\n  function deleteRating() {\r\n    fetch(\r\n      \"https://api.themoviedb.org/3/movie/\" +\r\n        id +\r\n        \"/rating?api_key=f57efe1486f26a1000ecc7f73ebf0005&guest_session_id=\" +\r\n        token.guest_session_id,\r\n      {\r\n        method: \"DELETE\",\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n      }\r\n    )\r\n      .then(res => res.text()) // OR res.json()\r\n      .then(res => {\r\n        console.log(res);\r\n        setRating(() => 0);\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  function handleChange(newRating) {\r\n    //OVO RADI\r\n    // axios\r\n    //   .post(\r\n    //     \"https://api.themoviedb.org/3/movie/\" +\r\n    //       id +\r\n    //       \"/rating?api_key=f57efe1486f26a1000ecc7f73ebf0005&guest_session_id=\" +\r\n    //       token.guest_session_id,\r\n    //     {\r\n    //       value: newRating\r\n    //     },\r\n    //     { cache: \"no-store\" }\r\n    //   )\r\n    //   .then(function(response) {\r\n    //     console.log(response);\r\n    //     setRating(() => newRating);\r\n    //   })\r\n    //   .catch(function(error) {\r\n    //     console.log(error);\r\n    //   });\r\n\r\n    fetch(\r\n      \"https://api.themoviedb.org/3/movie/\" +\r\n        id +\r\n        \"/rating?api_key=f57efe1486f26a1000ecc7f73ebf0005&guest_session_id=\" +\r\n        token.guest_session_id,\r\n      {\r\n        method: \"POST\", // *GET, POST, PUT, DELETE, etc.\r\n        mode: \"cors\", // no-cors, *cors, same-origin\r\n        cache: \"no-store\", // *default, no-cache, reload, force-cache, only-if-cached\r\n        credentials: \"same-origin\", // include, *same-origin, omit\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n          // 'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        redirect: \"follow\", // manual, *follow, error\r\n        referrer: \"no-referrer\", // no-referrer, *client\r\n        body: JSON.stringify({\r\n          value: newRating\r\n        }) // body data type must match \"Content-Type\" header\r\n      }\r\n    )\r\n      .then(function(response) {\r\n        console.log(response);\r\n        setRating(() => newRating);\r\n      })\r\n      .catch(function(error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  function loadInitial() {\r\n    // OVO RADII SIGURNO\r\n    fetch(\r\n      \"https://api.themoviedb.org/3/guest_session/\" +\r\n        token.guest_session_id +\r\n        \"/rated/movies?api_key=f57efe1486f26a1000ecc7f73ebf0005\",\r\n      { cache: \"no-store\" }\r\n    )\r\n      .then(resp => resp.json())\r\n      .then(data => {\r\n        let movieList = [...data.results.filter(movie => movie.id === id)];\r\n        if (movieList.length) setRating(movieList[0].rating);\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n  useEffect(() => {\r\n    if (rating === 0) {\r\n      loadInitial();\r\n    }\r\n  });\r\n  return (\r\n    <div>\r\n      <StarRatings\r\n        rating={rating}\r\n        starRatedColor=\"yellow\"\r\n        changeRating={handleChange}\r\n        numberOfStars={10}\r\n        name=\"rating\"\r\n      ></StarRatings>\r\n      <button className=\"btn btn-dark\" onClick={deleteRating}>\r\n        Delete rating\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\nexport { RatingComponent };\r\n","import React, { useEffect } from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { MovieDetails, MainScreen } from \"./components\";\n\nfunction App() {\n  let fetchGuestToken = () => {\n    fetch(\n      \"https://api.themoviedb.org/3/authentication/guest_session/new?api_key=f57efe1486f26a1000ecc7f73ebf0005\"\n    )\n      .then(resp => {\n        return resp.json();\n      })\n      .then(data => {\n        console.log(\"New guest token fetched\")\n        localStorage.setItem(\"guestToken\", JSON.stringify(data));\n      });\n  };\n\n  useEffect(() => {\n    let token = JSON.parse(localStorage.getItem(\"guestToken\"));\n    if (token) {\n      let dateString = token.expires_at;\n      let expireDate = new Date(dateString);\n      let currDate = new Date();\n      if (expireDate < currDate) {\n        fetchGuestToken();\n      }\n    } else {\n      fetchGuestToken();\n    }\n  });\n  return (\n    <BrowserRouter>\n      <main className=\"container\">\n        <Switch>\n          <Route exact path=\"/\" component={MainScreen} />\n          <Route exact path=\"/movie/:id\" component={MovieDetails} />\n          <Route path=\"/*\" component={MainScreen} />\n        </Switch>\n      </main>\n\n      <footer> This is a Cobe app</footer>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}